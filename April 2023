--1.

entity encoder_8to3_binary is
port (A : in bit_vector (7 downto 0);
      F : out bit_vector (7 downto 0));
end entity;
architecture encoder_8to3_binary_arch of encoder_8to3_binary is
begin
with (A) select
F <= "000" when "00000001",
     "001" when "00000010",
     "010" when "00000100",
     "011" when "00001000",
     "100" when "00010000",
     "101" when "00100000",
     "110" when "01000000",
     "111" when "10000000";
end architecture;

--2.
Library IEEE;
using IEEE.std_logic_1164.all;
entity Automat is
port (Clock, Reset : in std_logic;
      A : in std_logic;
      F : out std_logic);
end entity;
architecture Automat_arch of Automat is
type State_type is (s0, s1, s2, s3);
signal trenutno_stanje, sledece_stanje : State_type;
begin
memorija : process (Clock, Reset) begin
if (Reset = '0') then
trenutno_stanje <= s0;
elsif (rising_edge(Clock)) then
trenutno_stanje <= sledece_stanje;
end if;
end process;
logika_stanja : process (trenutno_stanje, A) begin
case (trenutno_stanje) is
when s0 => if (A = '1') then
           sledece_stanje <= s1;
           else
           sledece_stanje <= s0;
           end if;
when s1 => if (A = '1') then
           sledece_stanje <= s2;
           else
           sledece_stanje <= s0;
           end if;
when s2 => if (A = '1') then
           sledece_stanje <= s3;
           else
           sledece_stanje <= s0;
           end if;
when s3 => if (A = '1') then
           sledece_stanje <= s3;
           else
           sledece_stanje <= s0;
           end if;
end case;
end process;
logika_izlaza : process (trenutno_stanje, A) begin
case (trenutno_stanje) is
when s0 => if (A = '1') then
           F <= '0';
           else
           F <= '1';
           end if;
when s1 => if (A = '1') then
           F <= '1';
           else
           F <= '0';
           end if;
when s2 => if (A = '1') then
           F <= '0';
           else
           F <= '0';
           end if;
when s3 => if (A = '1') then
           F <= '0';
           else
           F <= '0';
           end if;
end case;
end process;
end architecture;
